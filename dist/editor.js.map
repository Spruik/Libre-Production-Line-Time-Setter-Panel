{"version":3,"sources":["../src/editor.js"],"names":["tablePanelEditor","$q","uiSegmentSrv","restrict","scope","templateUrl","controller","TablePanelEditorCtrl","_","transformers","$scope","console","log","ctrl","editor","panelCtrl","panel","fontSizes","addColumnSegment","newPlusButton","updateTransformHints","canSetColumns","columnsHelpMessage","transform","dataRaw","when","columns","getColumns","segments","map","c","newSegment","value","text","column","find","push","render","plusButton","html","without"],"mappings":"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","file":"editor.js","sourcesContent":["import _ from 'lodash';\nimport { transformers } from './transformers';\n\nexport class TablePanelEditorCtrl {\n\n  /** @ngInject */\n  constructor($scope, $q, uiSegmentSrv) {\n    console.log($scope.ctrl);\n    \n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.transformers = transformers;\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.addColumnSegment = uiSegmentSrv.newPlusButton();\n    this.updateTransformHints();\n  }\n\n  updateTransformHints() {\n    this.canSetColumns = false;\n    this.columnsHelpMessage = '';\n\n    switch (this.panel.transform) {\n      case 'timeseries_aggregations': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'json': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'table': {\n        this.columnsHelpMessage = 'Columns and their order are determined by the data query';\n      }\n    }\n  }\n\n  getColumnOptions() {\n    if (!this.panelCtrl.dataRaw) {\n      return this.$q.when([]);\n    }\n    const columns = this.transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const segments = _.map(columns, (c) => this.uiSegmentSrv.newSegment({ value: c.text }));\n    return this.$q.when(segments);\n  }\n\n  addColumn() {\n    const columns = transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const column = _.find(columns, { text: this.addColumnSegment.value });\n\n    if (column) {\n      this.panel.columns.push(column);\n      this.render();\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.addColumnSegment.html = plusButton.html;\n    this.addColumnSegment.value = plusButton.value;\n  }\n\n  transformChanged() {\n    this.panel.columns = [];\n    if (this.panel.transform === 'timeseries_aggregations') {\n      this.panel.columns.push({ text: 'Avg', value: 'avg' });\n    }\n\n    this.updateTransformHints();\n    this.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  removeColumn(column) {\n    this.panel.columns = _.without(this.panel.columns, column);\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function tablePanelEditor($q, uiSegmentSrv) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/plugins/smart-factory-prod-line-time-setter-panel/partials/editor.html',\n    controller: TablePanelEditorCtrl,\n  };\n}\n"]}