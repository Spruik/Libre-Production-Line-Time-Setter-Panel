{"version":3,"sources":["../src/time_setter_ctrl.js"],"names":["utils","postgres","TimeSetterCtrl","ctrl","data","panelCtrl","productionLine","submit","initTimer","tryInitForm","showModal","tryCount","setTimeout","startInitForm","e","closeForm","alert","$","timepicker","showMeridian","showSeconds","maxHours","minuteStep","secondStep","defaultTime","start_time","icons","up","down","trigger","site","area","line","production_line","time","isTimeValid","url","getUrl","query","getQuery","update","then","timeSrv","refreshDashboard","catch","items","split","length"],"mappings":"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","file":"time_setter_ctrl.js","sourcesContent":["import * as utils from './utils'\nimport * as postgres from './postgresHelper'\n\nexport class TimeSetterCtrl {\n\n  /** @ngInject */\n  constructor(ctrl, data) {\n    this.panelCtrl = ctrl;\n    this.panelCtrl.productionLine = data\n    this.panelCtrl.submit = this.submit()\n    this.panelCtrl.initTimer = this.tryInitForm()\n  }\n\n  showForm(){   \n    utils.showModal('setter_form.html', this.panelCtrl)\n    this.panelCtrl.tryCount = 1\n  }\n\n  tryInitForm(){\n    setTimeout(() => {\n      try{\n        this.startInitForm()\n      }catch(e){\n        if (this.panelCtrl.tryCount < 15) {\n          this.panelCtrl.tryCount ++\n          this.tryInitForm()\n        }else {\n          this.closeForm()\n          utils.alert('error', 'Error', 'Form initialisation failed due to \"' + e + '\", please try agian')\n        }\n      }\n    }, 200);\n  }\n\n  startInitForm(){\n    $('#start-time-picker').timepicker({\n      showMeridian: false,\n      showSeconds: true,\n      maxHours: 24,\n      minuteStep: 1,\n      secondStep: 1,\n      defaultTime: this.panelCtrl.productionLine.start_time || '6:00:00',\n      icons: {\n          up: 'fa fa-chevron-up',\n          down: 'fa fa-chevron-down'\n      }\n    })\n  }\n\n  closeForm(){\n    $('#prodLine-ts-form-close-btn').trigger('click')\n  }\n  \n  submit(){\n    return () => {\n      const site = this.panelCtrl.productionLine.site\n      const area = this.panelCtrl.productionLine.area\n      const line = this.panelCtrl.productionLine.production_line\n      const time = this.panelCtrl.productionLine.start_time\n\n      if (!this.isTimeValid(time)){\n        utils.alert('warning', 'Time Format Invalid', 'The Time Format is invvalid, please enter a valid time Format h:mm:ss')\n        return\n      }\n\n      const url = postgres.getUrl(this.panelCtrl.productionLine)\n      const query = postgres.getQuery(time)\n\n      utils.update(url, query).then(res => {\n        this.closeForm()\n        utils.alert('success', 'Successful', 'The start time for ' + site + ' | ' + area + ' | ' + line + ' has been set to ' + time)\n        this.panelCtrl.timeSrv.refreshDashboard()\n      }).catch(e => {\n        this.closeForm()\n        utils.alert('error', 'Error', 'Start time update failed due to \"' + e + '\", please try agian')\n        this.panelCtrl.timeSrv.refreshDashboard()\n      })\n    }\n  }\n\n  isTimeValid(time) {\n    if(time === '') { return false }\n    const items = time.split(':')\n    if (items.length !== 3) { return false }\n    return true\n  }\n}"]}